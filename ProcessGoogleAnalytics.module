<?php

/**
 * Google Analytics Process Module v 1.2.0
 * View your Google Analytics Statistics in the Processwire Admin Panel
 *
 * @author Stefan Wanzenried (Wanze)
 * @copyright Stefan Wanzenried
 *
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 * 
 * Notes:
 * To display the charts with javascript, the jquery plugin 'jqplot' is used
 * http://www.jqplot.com/
 * 
 */

class ProcessGoogleAnalytics extends Process implements Module, ConfigurableModule {
	
	const PAGE_NAME = 'google-analytics';
	const PERMISSION_NAME = 'ga-view';
	const FACTOR_WIDTH_PERCENT = 0.7;
	
	protected $ga = null;	
	protected $cache = null;	
	protected $customDateRange = false;
	
	
	/**
	 * Default config values 
	 *
	 */
	protected static $defaults = array(
		'clientId' => '',
		'clientSecret' => '',
		'accountId' => '',
		'accessToken' => '',
		'refreshToken' => '',
		'tokenCreated' => '',
		'tokenExpires' => '',
		'maxResults' => 30,
		'cacheTime' => 1800,
		'dateFormat' => '%d %B %Y',
		'chartColor' => '#DB1174',
		'dateFormatInput' => 'Y-m-d',
		'dateRange' => 'm1',
		'compareToPrevious' => 0,
	);
	
	
	/**
	 * Names of cache files by MarkupCache
	 *
	 */
	protected static $cacheFiles = array(
		'gaAudienceDemographics',
		'gaAudienceMobile',
		'gaAudienceSystem',
		'gaAudienceVisits',
		'gaAudienceVisitsStats',
		'gaContentPageviews',
		'gaContentStats',
		'gaContentTopPages',
		'gaTrafficSourcesKeywords',
		'gaTrafficSourcesReferral',
		'gaTrafficSourcesStats',
	);
	
	/**
	 * Date ranges to choose in the config
	 *
	 */
	protected static $dates = array(
		'd1' => 'last 24 hours',
		'd2' => 'last 2 days',
		'd3' => 'last 3 days',
		'd4' => 'last 4 days',
		'd5' => 'last 5 days',
		'd6' => 'last 6 days',
		'd7' => 'last week',
		'd14' => 'last 2 weeks',
		'd21' => 'last 3 weeks',
		'm1' => 'last month',
		'm2' => 'last 2 months',
		'm3' => 'last 3 months',
	);
	
		
	public static function getModuleInfo() {

		return array(
			'title' => __('Google Analytics',__FILE__),         
			'summary' => __('View your Google Analytics Statistics in the Processwire Admin Panel',__FILE__),
			'version' => 121,
			'href' => 'http://processwire.com/talk/topic/1609-processgoogleanalytics/', 
			'permanent' => false, 
			'permission' => self::PERMISSION_NAME,
			'icon' => 'bar-chart'
		);

	}
	
	/**
	 * Init the module
	 * 
	 * @access public
	 * @return void
	 */
	public function init() {

		//Make sure all config variables are set in modules data 
		$config = array_merge(self::$defaults, $this->data);
		foreach ($config as $k => $v) $this->set($k, $v);

		$this->cache = $this->modules->get('MarkupCache');							
		
		//Clear cache requested?
		if ($this->input->get->a && $this->input->get->a == 'clearCache') {
			$this->clearCache();
			$this->session->redirect('./');
		}
		
		//Find out the startDate / endDate. Either custom dates requested via GET or we pick the dateRange from the modules config
		if ($this->input->get->startDate && $this->input->get->endDate) {
			$startDate = date('Y-m-d', strtotime($this->input->get->startDate));
			$endDate = date('Y-m-d', strtotime($this->input->get->endDate));
			//We set the dates also in the session, because the stats are loaded with ajax and need to access those dates in requests later
			$this->session->gaStartDate = $startDate;
			$this->session->gaEndDate = $endDate;
			$this->startDate = $startDate;
			$this->endDate = $endDate;
		} else {
			if ($this->config->ajax && $this->session->gaStartDate && $this->session->gaEndDate) {
				$this->startDate = $this->session->gaStartDate;
				$this->endDate = $this->session->gaEndDate;
				$this->customDateRange = true;
				$this->compareToPrevious = false; //Don't compare results when looking at custom date Range
			} else {
				$rangeType = $this->dateRange[0]; //d = days, m = months
				$rangeValue = (int) substr($this->dateRange,1);
				switch ($rangeType) {
					case 'd':
						$this->startDate = date('Y-m-d', strtotime("-{$rangeValue} days"));
						if ($this->compareToPrevious) $this->startDateCompare = date('Y-m-d', strtotime("-{$rangeValue} days", strtotime($this->startDate)));
						break;
					case 'm':
						$this->startDate = date('Y-m-d', strtotime("-{$rangeValue} months"));
						if ($this->compareToPrevious) $this->startDateCompare = date('Y-m-d', strtotime("-{$rangeValue} months", strtotime($this->startDate)));
						break;
					default:
						$this->startDate = date('Y-m-d', strtotime('-1 month'));
						if ($this->compareToPrevious) $this->startDateCompare = date('Y-m-d', strtotime('-1 month', strtotime($this->startDate)));
				}				
				
				$this->endDate = date('Y-m-d');	
				$this->session->remove('gaStartDate');
				$this->session->remove('gaEndDate');
			}
		}
		
		//Only load js/css if this is not an ajax request to get statistics
		if (!$this->config->ajax) {
			$this->config->scripts->add($this->config->urls->ProcessGoogleAnalytics . 'jqplot/jquery.jqplot.min.js');
			$this->config->scripts->add($this->config->urls->ProcessGoogleAnalytics . 'jqplot/excanvas.min.js'); //for IE
			$this->config->scripts->add($this->config->urls->ProcessGoogleAnalytics . 'jqplot/plugins/jqplot.dateAxisRenderer.min.js');		
			$this->config->scripts->add($this->config->urls->ProcessGoogleAnalytics . 'jqplot/plugins/jqplot.highlighter.min.js');		
			$this->config->styles->add($this->config->urls->ProcessGoogleAnalytics  . 'jqplot/jquery.jqplot.min.css');			
			$this->modules->get('JqueryWireTabs');
			$this->modules->get('MarkupAdminDataTable'); //Only needed to load css/js for the tables			
			//Make some config variables available in javascript
			$this->config->js('ga_url', $this->page->url);
			$this->config->js('ga_chart_color', $this->chartColor);
            $this->wire('breadcrumbs')->append(new Breadcrumb($this->page->url, $this->page->title));
		}

		//Initialize the Google API		
		$this->loadGoogleApi();
		parent::init();
	}

	
	public function ___install() { 
		
		parent::___install();		
		$page = $this->pages->get('template=admin,name='.self::PAGE_NAME);
		if (!$page->id) {
			$page = new Page();
			$page->template = 'admin';
			$page->parent = $this->pages->get($this->config->adminRootPageID);
			$page->title = 'Google Analytics';
			$page->name = self::PAGE_NAME;
			$page->process = $this;
			$page->save();			
		}
		$permission = $this->permissions->get(self::PERMISSION_NAME);
		if (!$permission->id) {
			$p = new Permission();
			$p->name = self::PERMISSION_NAME;
			$p->title = $this->_('View Google Analytics Page');
			$p->save();			
		}

	}

	
	public function ___uninstall() {

		parent::___uninstall();		
		$permission = $this->permissions->get(self::PERMISSION_NAME);
		if ($permission->id) {
			$permission->delete();		
		}
		$page = $this->pages->get('template=admin,name='.self::PAGE_NAME);
		if ($page->id) {
			$page->delete();		
		}
		$this->clearCache();
		$this->ga->auth->revokeAccess($this->accessToken);
		
	}

	
	/**
	 * Execute this Module
	 *
	 * @access public
	 * @return html
	 */
	public function ___execute() { 
		
		if (!$this->clientId || !$this->clientSecret) {
			$this->error($this->_('You must enter the Client-Id and Client-Secret in the module config!'));			
			return;
		}
		
		if ($this->accessToken) { 
			if ($this->accountId) {
				return $this->renderInterface();
			} else { 
				return $this->selectAccount();
			}
		} else { 
			return $this->auth();
		}
				
	}
		
	
	/**
	 * Clear the Cache files generated by MarkupCache
	 * 
	 * @access protected
	 * @return void
	 */
	protected function clearCache() {
		
		foreach (self::$cacheFiles as $file) {
			$this->cache->get($file,0);
		}
		
	}
	
	
	/**
	 * Store new config options in Database
	 * 
	 * @access protected
	 * @param array $data new config values
	 * @return void
	 */
	protected function saveModuleConfig(array $data) {
		
		$cfg = array_merge($this->data, $data);
		$this->modules->saveModuleConfigData($this, $cfg);
	
	}
	
	/**
	 * Encode a dates/time array to JSON (for the chart rendered with jqplot)
	 * 
	 * @access protected
	 * @param mixed $data
	 * @return JSON
	 */
	protected function formatDates($data){
	
		if (!isset($data['rows']) || !count($data['rows'])) return false;

		$jsonOut = array();
		foreach ($data['rows'] as $v) {
			if (count($v) == 3) { //Date and Time requested..
				$key = date('Y-m-d H:00', strtotime($v[0] . ' ' . $v[1] . ':00'));
				$value = (int)$v[2]; //json_encode encodes as string when not casted to int
			} else {
				$key = date('Y-m-d', strtotime($v[0]));
				$value = (int)$v[1]; 			
			}
			$jsonOut[] = array($key, $value);
		}
		return json_encode(array($jsonOut));

	}
	
	/**
	 * Render a table with 3 columns
	 * 
	 * @access protected
	 * @param array $data Contains one or multiple tables
	 * @param string $scope Scope to build a unique ID for the table
	 * @param $totalFrom (default = 'visits') Calculate total from this ga metric (ga:visits,ga:pageviews etc.)
	 * @return html
	 */
	protected function renderStatisticTable($data, $title, $totalFrom='visits') {
	    
	    $table = $this->modules->get('MarkupAdminDataTable');
	    $table->setEncodeEntities(false);
	    $table->headerRow(array($title, $this->_(ucfirst($totalFrom)), $this->_('% ' . ucfirst($totalFrom))));
	    $class = str_replace(' ', '_', $title);
	    $table->setClass($class);
	    $table->setSortable(false);
	    $title = $this->_(ucfirst($title));

	    if (!isset($data['rows']) || !count($data['rows'])) {
			$table->row(array($this->_('no records found')));
			return $table->render();    
	    } 

	    $total = $data['totalsForAllResults']["ga:{$totalFrom}"];
	    $count = count($data['rows']);
	    foreach ($data['rows'] as $k => $v) {
			$title = $v[0];
			$visits = $v[1];
			$percent = (100 / $total) * $visits;
			$width = (int)($percent * self::FACTOR_WIDTH_PERCENT);
			$percent_str = number_format($percent, 2) . ' %';
			$table->row(array($title, $visits, "<div class='percent' style='width: {$width}px;'></div>{$percent_str}"));
			if ($k == 9) {
				$table->row(array("<a class='ga_display_more_rows' href='#'>".$this->_('show more')."</a>"));
			}
	    }	    
  		return $table->render();

	}
	
	/**
	 * Get Audience Visits by Date (called via Ajax)
	 * 
	 * @access public
	 * @return json
	 */
	public function ___executeAudiencevisits() {

		$data = $this->cache->get('gaAudienceVisits', $this->cacheTime);
		
		if (!$data || $this->customDateRange) {									
			$params = array(
				'metrics' => 'ga:visits',
				'dimensions' => 'ga:date',
			);
			//If start and end date are near, query also the hours
			$end = strtotime($this->endDate) / 60 / 60 / 24;
			$start = strtotime($this->startDate) / 60 / 60 / 24;
			if ($end - $start <= 3) $params['dimensions'] .= ',ga:hour';
			$data = $this->ga->query($params);			
			$data = $this->formatDates($data);
        	if (!$this->customDateRange) $this->cache->save($data);
        }
        echo $data;
	}
	
	
	/**
	 * Get Audience Visits Stats (called via Ajax)
	 * 
	 * @access public
	 * @return json
	 */
	public function ___executeAudiencevisitsstats() {
		
		$data = $this->cache->get('gaAudienceVisitsStats', $this->cacheTime);
		
		if (!$data || $this->customDateRange) {						
			$params = array(
				'metrics' => 'ga:visitors,ga:newVisits,ga:percentNewVisits,ga:visits,ga:bounces,ga:pageviews,ga:visitBounceRate,ga:timeOnSite,ga:avgTimeOnSite',
			);
			$data = $this->ga->query($params);						
        	
        	if (!isset($data['totalsForAllResults'])) {
	        	echo $this->_('no records found');
	        	return;
        	}
        	
        	$data = $data['totalsForAllResults'];
        	
        	//Compare data to previous date range?
        	if ($this->compareToPrevious) {
        		$params['start-date'] = $this->startDateCompare;
        		$params['end-date'] = $this->startDate;
				$dataCompare = $this->ga->query($params);
				if (isset($dataCompare['totalsForAllResults'])) {
					$dataCompare = $dataCompare['totalsForAllResults'];
				} else {
					$this->compareToPrevious = false;				
				}
        	}
        	
        	$titles = array(
        		'ga:visits' => $this->_('Visits Total'),
        		'ga:visitors' => $this->_('Unique Visitors'),
        		'ga:newVisits' => $this->_('New Visits'),
        		'ga:pageviews' => $this->_('Pageviews'),        		
        		'ga:percentNewVisits' => $this->_('New Visits'),
        		'ga:returningVisits' => $this->_('Returning Visits'),
        		'ga:visitBounceRate' => $this->_('Bounce Rate'),
        		'ga:avgTimeOnSite' => $this->_('Avg. Visit Duration'),
        	);
   			
   			$table  = "<table class='ga_table ga_table_highlight' id='ga_table_audience_stats'>";
   			$table .= "<tr>";
   			$i=0;
   			$columns = 4;
   			$tdwidth = 100 / $columns;
   			foreach ($titles as $k => $title) {
   				if($i % $columns == 0) $table .= "</tr><tr>";
   				$value = isset($data[$k]) ? $data[$k] : '';
   				$valueF = ''; //Value formated
   				$valueCompare = '';
   				switch($k){
   					case 'ga:percentNewVisits':
   					case 'ga:visitBounceRate':
   						$valueF = number_format($value,2) . ' %';
   						if ($this->compareToPrevious && isset($dataCompare[$k])) $valueCompare = $value - $dataCompare[$k];
   						break;
   					case 'ga:avgTimeOnSite':
   						$valueF = gmdate('H:i:s',$value);
   						break;
   					case 'ga:returningVisits':
   						$value = $data['ga:visits'] - $data['ga:newVisits'];
   						$valueF = number_format($value);
   						if ($this->compareToPrevious) $valueCompare = $value - ($dataCompare['ga:visits'] - $dataCompare['ga:newVisits']);   						
   						break;
   					default:
   						$valueF = number_format($value);
   						if ($this->compareToPrevious && isset($dataCompare[$k])) $valueCompare = $value - $dataCompare[$k];
   				}
   				$table .= "<td style='width: {$tdwidth}%;'>{$valueF}<div class='desc'>{$title}";
   				if ($this->compareToPrevious && !empty($valueCompare)) {
	   				$class = ($valueCompare < 0) ? 'minus' : 'plus';
	   				if ($k == 'ga:visitBounceRate') $class = ($class == 'minus') ? 'plus' : 'minus';
		   			$valueCompareF = ($valueCompare < 0) ? str_replace('-', '- ', number_format($valueCompare)) : '+ ' . number_format($valueCompare);
	   				if ($k == 'ga:percentNewVisits' || $k == 'ga:visitBounceRate') $valueCompareF .= " %";
	   				$table .= "<span class='compare {$class}'>{$valueCompareF}</span>";
   				}
   				$table .= "</div></td>";
   				$i++;
   			}
   			$table .= "</tr>";
   			$table .= "</table>";
   			$data = $table;
        	if (!$this->customDateRange) $this->cache->save($data);
        }
        echo $data;
		
	}
	
	/**
	 * Get demographics statistics (Visits by Countries / Cities / Languages) (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeAudiencedemographics() {
		
		$data = $this->cache->get('gaAudienceDemographics', $this->cacheTime);

		if (!$data || $this->customDateRange) {						
			$params = array(
				'metrics' => 'ga:visits',
				'dimensions' => 'ga:country',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
			);
			$countries = $this->ga->query($params);
			$params['dimensions'] = 'ga:city';
			$cities = $this->ga->query($params);
			$params['dimensions'] = 'ga:language';
			$langs = $this->ga->query($params);
			$data  = $this->renderStatisticTable($countries, 'country');
      		$data .= $this->renderStatisticTable($cities, 'city');
      		$data .= $this->renderStatisticTable($langs, 'language');
        	if (!$this->customDateRange) $this->cache->save($data);
        }
        echo $data;

	}		

	/**
	 * Get System Statistics (Visits by Browser / OS / Resolution) (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeAudiencesystem() {
		
		$data = $this->cache->get('gaAudienceSystem', $this->cacheTime);
		
		if (!$data || $this->customDateRange) {						
			$params = array(
				'metrics' => 'ga:visits',
				'dimensions' => 'ga:browser',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
			);
			$browsers = $this->ga->query($params);
			$params['dimensions'] = 'ga:operatingSystem';
			$os = $this->ga->query($params);
			$params['dimensions'] = 'ga:screenResolution';
			$resolutions = $this->ga->query($params);
			$data  = $this->renderStatisticTable($browsers, 'browser');
      		$data .= $this->renderStatisticTable($os, 'os');
      		$data .= $this->renderStatisticTable($resolutions, 'resolution');
        	if (!$this->customDateRange) $this->cache->save($data);
        }
        echo $data;

	}		

	/**
	 * Get Mobile Statistics (Visits by OS / Resolution) (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeAudiencemobile() {

		$data = $this->cache->get('gaAudienceMobile', $this->cacheTime);			
		
		if (!$data || $this->customDateRange) {						
			$params = array(
				'metrics' => 'ga:visits',
				'dimensions' => 'ga:operatingSystem',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
				'segment' => 'gaid::-11',
			);
			$os = $this->ga->query($params);
			$params['dimensions'] = 'ga:screenResolution';
			$resolutions = $this->ga->query($params);
      		$data = $this->renderStatisticTable($os, 'os');
      		$data .= $this->renderStatisticTable($resolutions, 'resolution');
        	if (!$this->customDateRange) $this->cache->save($data);
        }
        echo $data;

	}		
	
	/**
	 * Get Content Pageviews by Date (called via Ajax)
	 * 
	 * @access public
	 * @return json
	 */
	public function ___executeContentpageviews() {
		
		$data = $this->cache->get("gaContentPageviews", $this->cacheTime);
		
		if (!$data || $this->customDateRange) {						
			$params = array(
				'metrics' => 'ga:pageviews',
				'dimensions' => 'ga:date',
			);

			//If start and end date are near, query also the hours
			$end = strtotime($this->endDate) / 60 / 60 / 24;
			$start = strtotime($this->startDate) / 60 / 60 / 24;
			if ($end - $start <= 3) $params['dimensions'] .= ',ga:hour';			
        	$data = $this->ga->query($params);
        	$data = $this->formatDates($data);
        	if (!$this->customDateRange) $this->cache->save($data);
        }
        echo $data;
	}

	/**
	 * Get Content Stats (called via Ajax)
	 * 
	 * @access public
	 * @return json
	 */
	public function ___executeContentstats() {
		
		$data = $this->cache->get('gaContentStats', $this->cacheTime);
		
		if (!$data || $this->customDateRange) {						
			$params = array(
				'metrics' => 'ga:pageviews,ga:uniquePageviews,ga:visitBounceRate,ga:exitRate',
			);
			$data = $this->ga->query($params);
	
	       	if (!isset($data['totalsForAllResults'])) {
	        	echo $this->_('no records found');
	        	return;
        	}

        	$data = $data['totalsForAllResults'];
        	//Compare data to previous date range?
        	if ($this->compareToPrevious) {
				$params['start-date'] = $this->startDateCompare;
				$params['end-date'] = $this->startDate;
				$dataCompare = $this->ga->query($params);
				if (isset($dataCompare['totalsForAllResults'])) {
					$dataCompare = $dataCompare['totalsForAllResults'];					
				} else {
					$this->compareToPrevious = false;
				}
        	}	        	
        	$titles = array(
        		'ga:pageviews' => $this->_('Pageviews Total'),
        		'ga:uniquePageviews' => $this->_('Unique Pageviews Total'),
        		'ga:visitBounceRate' => $this->_('Bounce Rate'),
        		'ga:exitRate' => $this->_('Exits'),
        	);
   			$table = "<table class='ga_table ga_table_highlight' id='ga_table_content_stats'>";
   			$table .= "<tr>";
   			$columns = 4;
   			$tdwidth = 100 / $columns;
   			foreach ($titles as $k => $title) {
   				$value = isset($data[$k]) ? $data[$k] : 0;
   				$valueF = number_format($value);
   				if ($k == 'ga:visitBounceRate' || $k == 'ga:exitRate') $valueF = number_format($value, 2) . ' %';
   				$table .= "<td style='width: {$tdwidth}%;'>{$valueF}<div class='desc'>{$title}";
   				if ($this->compareToPrevious && isset($dataCompare[$k])) {
	   				$valueCompare = $value - $dataCompare[$k];
	   				$class = ($valueCompare < 0) ? 'minus' : 'plus';
	   				$valueCompareF = ($valueCompare < 0) ? str_replace('-', '- ', number_format($valueCompare)) : '+ ' . number_format($valueCompare);
	   				if ($k == 'ga:visitBounceRate' || $k == 'ga:exitRate') {
		   				$valueCompareF .= ' %';
		   				$class = ($class == 'minus') ? 'plus' : 'minus';
	   				}
	   				$table .= "<span class='compare {$class}'>{$valueCompareF}</span>";
   				}	   				
   				$table .= '</div></td>';
   			}
   			$table .= '</tr></table>';
        	$data = $table;
        }
        echo $data;
		
	}
	
	public function ___executeContenttoppages() {

		$data = $this->cache->get('gaContentTopPages', $this->cacheTime);
		
		if (!$data || $this->customDateRange) {
			$params = array(
				'metrics' => 'ga:pageviews',
				'dimensions' => 'ga:pagePath',
				'sort' => '-ga:pageviews',
				'max-results' => $this->maxResults,
			);
			$data = $this->ga->query($params);
			$data = $this->renderStatisticTable($data, 'page', 'pageviews');
			if (!$this->customDateRange) $this->cache->save($data);			
		}
		echo $data;
	}
	
	
	/**
	 * Get Traffic Sources (direct / referral / organic) (called via ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeTrafficsourcesstats(){
		
		$data = $this->cache->get('gaTrafficSourcesStats', $this->cacheTime);
		
		if (!$data || $this->customDateRange) {						
			$params = array(
				'metrics' => 'ga:visits',
				'dimensions' => 'ga:medium',
				'max-results' => $this->maxResults,				
			);
   			$data = $this->ga->query($params);
   			$table  = "<table class='ga_table ga_table_highlight' id='ga_table_traffic_sources_stats'>";
   			$table .= "<tr>";
   			$i=0;
   			$columns = 3;
   			$tdwidth = 100 / $columns;
   			if (isset($data['rows']) && count($data['rows']) > 0) {
	   			$total = $data['totalsForAllResults']['ga:visits'];
	   			foreach ($data['rows'] as $k => $value) {
	   				if ($i % $columns == 0) $table .= "</tr><tr>";
	   				$title = $value[0];
	   				if ($k == 0) $title = 'Direct';
	   				$title = $this->_(ucfirst($title) . ' Traffic');
	   				$visits = $value[1];
	   				$percent = number_format(((100 / $total) * $visits),2);
	   				$table .= "<td style='width: {$tdwidth}%;'>{$percent} %<div class='desc'>{$title} ({$visits} ".$this->_('visits').")</div></td>";
	   				$i++;
	   			}	   			
   			} else {
	   			$table .= "<td>".$this->_('no records found')."</td>";
   			}
   			$table .= "</tr>";
   			$table .= "</table>";
   			$data = $table;
        	if (!$this->customDateRange) $this->cache->save($data);
        }
        echo $data;
	
	}
	
	
	/**
	 * Get the keywords (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeTrafficsourceskeywords() {
		
		$data = $this->cache->get('gaTrafficSourcesKeywords', $this->cacheTime);
		
		if (!$data || $this->customDateRange) {						
			$params = array(
				'metrics' => 'ga:visits',
				'dimensions' => 'ga:keyword',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
			);
			$keywords = $this->ga->query($params);
      		$data = $this->renderStatisticTable($keywords, 'keyword');
        	if (!$this->customDateRange) $this->cache->save($data);
        }
        echo $data;

	}		


	/**
	 * Get referral Traffic (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeTrafficsourcesreferral() {
		
		$data = $this->cache->get('gaTrafficSourcesReferral', $this->cacheTime);	
		
		if (!$data || $this->customDateRange) {						
			$params = array(
				'metrics' => 'ga:visits',
				'dimensions' => 'ga:source',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
			);
			
			$domains = $this->ga->query($params);
			$params['dimensions'] = 'ga:source,ga:referralPath';       	
			$urls = $this->ga->query($params);
        	//Rebuild rows array containing domain + path
        	$rows = array();
        	if (isset($urls['rows'])) {
	        	foreach ($urls['rows'] as $row) {
		        	$url  = 'http://www.' . $row[0] . $row[1];
		        	$url .= " (<a href='{$url}' target='_blank'>".$this->_('open')."</a>)";
		        	$rows[] = array($url,$row[2]);
	        	}
        	}
        	$urls['rows'] = $rows;
        	$data = $this->renderStatisticTable($domains, 'domain');
        	$data .= $this->renderStatisticTable($urls, 'url');
        	if (!$this->customDateRange) $this->cache->save($data);
        }
        echo $data;

	}		
	
			
	/**
	 * Render the required HTML-Markup to display the statistics loaded via Ajax
	 * 
	 * @access protected
	 * @return html
	 */
	protected function renderInterface() {
		
		$form = $this->modules->get('InputfieldForm');
		$form->attr('id','ga_form');
		$form->attr('method', 'get');
				
		//Wrapper are used to separate main sections with JqueryWireTabs
		$wrapperAudience = new InputfieldWrapper();
		$wrapperAudience->attr('id','audienceWrapper');
		$wrapperAudience->attr('title',$this->_('Audience'));
		$wrapperContent = new InputfieldWrapper();
		$wrapperContent->attr('title',$this->_('Content'));
		$wrapperContent->attr('id','contentWrapper');
		$wrapperTraffic = new InputfieldWrapper();
		$wrapperTraffic->attr('title',$this->_('Traffic Sources'));
		$wrapperTraffic->attr('id','trafficWrapper');
		$wrapperOptions = new InputfieldWrapper();
		$wrapperOptions->attr('title',$this->_('Options'));		
		$wrapperOptions->attr('id','optionsWrapper');		
		
		//Options to change the date range
		$fieldset = $this->modules->get('InputfieldFieldset');
		$fieldset->label = $this->_('Custom date range');
		$fieldset->description = $this->_('You can set a custom date range, for example to look at statistics from the past');
		$dateFrom = $this->modules->get('InputfieldDatetime');
		$dateFrom->label = $this->_('Start date');
		$dateFrom->attr('id+name','startDate');
		$dateFrom->attr('value',$this->startDate);
		$dateFrom->dateInputFormat = $this->dateFormatInput;
		$dateFrom->columnWidth = 50;
		$dateTo = $this->modules->get('InputfieldDatetime');
		$dateTo->label = $this->_('End date');
		$dateTo->attr('id+name','endDate');
		$dateTo->attr('value',$this->endDate);
		$dateTo->dateInputFormat = $this->dateFormatInput;
		$dateTo->columnWidth = 50;
		$button = $this->modules->get('InputfieldSubmit');
		$button->attr('name', '');
		$button->attr('value',$this->_('Show'));
		$fieldset->append($dateFrom);
		$fieldset->append($dateTo);
		$fieldset->append($button);
		$wrapperOptions->append($fieldset);
		$fieldset = $this->modules->get('InputfieldFieldset');
		$fieldset->label = $this->_('Clear Cache');
		$fieldset->description = $this->_('Clear the cache to load fresh statistics from Google');
		$fieldset->collapsed = 1;
		$button = $this->modules->get('InputfieldButton');
		$button->attr('href', './?a=clearCache');
		$button->attr('value', $this->_('Clear cache now'));
		$fieldset->append($button);
		$wrapperOptions->append($fieldset);
		
		//Audience - Visits
		$html  = "<div id='audience_visits_chart' class='ga_chart_lines load'></div>";
		$html .= "<div id='audience_visits_stats' class='load'></div>";		
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Visits");
		$field->attr('value',$html);
		$wrapperAudience->append($field);
		
		//Audience - Demographics
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Demographics");
		$field->columnWidth = 33;
		$html  = "<div class='ga_header_links'>";
		$html .= "<a href='country' class='on'>".$this->_('Countries')."</a> / ";
		$html .= "<a href='city'>".$this->_('Cities')."</a> / ";
		$html .= "<a href='language'>".$this->_('Languages')."</a>";
		$html .= "</div>";
		$html .= "<div id='audience_demographics' class='load ga_tables_wrapper'></div>";
		$field->attr('value',$html);
		$wrapperAudience->append($field);
		
		//Audience - System
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("System");
		$field->columnWidth = 33;
		$html  = "<div class='ga_header_links'>";
		$html .= "<a href='browser' class='on'>".$this->_('Browsers')."</a> / ";
		$html .= "<a href='os'>".$this->_('Operating Systems')."</a> / ";
		$html .= "<a href='resolution'>".$this->_('Screen Resolutions')."</a>";
		$html .= "</div>";
		$html .= "<div id='audience_system' class='load ga_tables_wrapper'></div>";
		$field->attr('value',$html);
		$wrapperAudience->append($field);		

		//Audience - Mobile
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Mobile");
		$field->columnWidth = 34;
		$html  = "<div class='ga_header_links'>";
		$html .= "<a href='os' class='on'>".$this->_('Operating Systems')."</a> / ";
		$html .= "<a href='resolution'>".$this->_('Screen Resolutions')."</a>";
		$html .= "</div>";
		$html .= "<div id='audience_mobile' class='load ga_tables_wrapper'></div>";
		$field->attr('value',$html);
		$wrapperAudience->append($field);		
		
		//Content Stats
		$html  = "<div id='content_pageviews_chart' class='ga_chart_lines load'></div>";
		$html .= "<div id='content_stats' class='load'></div>";
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Pageviews");
		$field->attr('value',$html);
		$wrapperContent->append($field);
		
		//Content Top sites
		$field = $this->modules->get('InputfieldMarkup');
		$field->label = $this->_('Top Content');
		$field->attr('value', "<div id='content_top_pages' class='load'></div>");
		$wrapperContent->append($field);
		
		//Traffic Sources Statistics
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Statistics");
		$field->attr('value',"<div id='traffic_sources_stats' class='load'></div>");
		$wrapperTraffic->append($field);

		//Traffic - Kewyords
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Keywords");
		$field->columnWidth = 50;
		$field->attr('value',"<div id='traffic_sources_keywords' class='load'></div>");
		$wrapperTraffic->append($field);		

		//Traffic - Referral Traffic
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Referral Traffic");
		$field->columnWidth = 50;
		$html  = "<div class='ga_header_links'>";
		$html .= "<a href='domain' class='on'>".$this->_('Domain')."</a> / ";
		$html .= "<a href='url'>".$this->_('URL')."</a>";
		$html .= "</div>";
		$html .= "<div id='traffic_sources_referral' class='load ga_tables_wrapper'></div>";
		$field->attr('value',$html);
		$wrapperTraffic->append($field);		
		
		$form->append($wrapperAudience);
		$form->append($wrapperContent);
		$form->append($wrapperTraffic);
		$form->append($wrapperOptions);
		
		$startDate = strftime($this->dateFormat,strtotime($this->startDate));
		$endDate = strftime($this->dateFormat,strtotime($this->endDate));
		$this->wire('processHeadline', $startDate . " - " . $endDate);
        return $form->render();

	}
		
	/**
	 * Handle authentication with Google over Oauth 2.0. 
	 * 
	 * @access protected
	 * @return html
	 */
	protected function auth() {

		if ($this->input->get->code) {
			$auth = $this->ga->auth->getAccessToken($this->input->get->code);
			if ($auth['http_code'] != 200) {
				$this->error('Could not fetch the accessToken');
				return;
			}
			$config = array(
				'accessToken' => $auth['access_token'], 
				'refreshToken' => $auth['refresh_token'], 
				'tokenCreated' => time(), 
				'tokenExpires' => $auth['expires_in'],
			);
			$this->saveModuleConfig($config);
			$this->session->redirect('./');
		} else {
			$authUrl = $this->ga->auth->buildAuthUrl();
			$form = $this->modules->get('InputfieldForm');
			$fieldset = $this->modules->get('InputfieldFieldset');
			$fieldset->label = $this->_('Authenticate');
			$fieldset->description = $this->_("You must login with your Google Account and grant the API access to your Google Analytics Statistics. You will be redirected to this page again afterwards to choose the Analytics Account.");			
			$fieldset->notes = $this->_('This step is executed only once. After authentication, an accessToken is stored in the database and gets refreshed by the module after expiration time.');
			$button = $this->modules->get('InputfieldButton');
			$button->attr('id+name', 'ga_oauth');
			$button->attr('href', $authUrl);
			$button->attr('value', $this->_('Authenticate'));
			$fieldset->add($button);
			$form->add($fieldset);
			return $form->render();
		}

	}
	
	
	/**
	 * Display a Dropdown to choose the GA Account (Statistics are displayed from this Account)
	 * 
	 * @access protected
	 * @return html
	 */
	protected function selectAccount() {
		
		if (!is_null($this->input->post->account_id)) {
			$accountId = $this->input->post->account_id;
			$accountId = "ga:{$accountId}";
			$this->saveModuleConfig(array('accountId' => $accountId));
			$this->session->redirect('./');			
		}
		
		//Create form to select GA Account
		$form = $this->modules->get('InputfieldForm');
		$form->attr('name+id', 'ga_form_set_account');
		$select = $this->modules->get('InputfieldSelect');
		$select->attr('name+id', 'account_id');
		$select->label = $this->_('Choose Google Analytics Account');
		$button = $this->modules->get('InputfieldSubmit');
		$button->attr('id+name', 'ga_set_account');
		$button->attr('value', $this->_('Save'));
		
		//Build profiles array
		$accounts = array();
		$profiles = $this->ga->getProfiles();
		
		if (isset($profiles['items']) && count($profiles['items'])) {
			foreach ($profiles['items'] as $account) {
				$id = $account['id'];
				$name = $account['name'];
				$accounts[$id] = $name;
			}
		} else {
			$this->error($this->_('No accounts found'));			
		}
						
		$select->addOptions($accounts);
		$form->append($select);
		$form->append($button);
		return $form->render();

	}
	
	
	/**
	 * Load and initialize the Google Analytics API
	 * 
	 * @access private
	 * @return void
	 */
	private function loadGoogleApi() {

		include_once($this->config->paths->ProcessGoogleAnalytics . 'GoogleAnalyticsAPI.class.php');
		$this->ga = new GoogleAnalyticsAPI();
		$this->ga->auth->setClientId($this->clientId);
		$this->ga->auth->setClientSecret($this->clientSecret);
		$this->ga->auth->setRedirectUri($this->page->httpUrl);
		$this->ga->setAccessToken($this->accessToken);
		$this->ga->setAccountId($this->accountId);
		
		//Check if the accessToken is expired - if so, get a new one
		if ($this->accessToken && $this->refreshToken && $this->tokenCreated && $this->tokenExpires) {
			if ((time() - $this->tokenCreated) >= $this->tokenExpires) {
				$auth = $this->ga->auth->refreshAccessToken($this->refreshToken);
				$config = array(
					'accessToken' => $auth['access_token'],
					'tokenExpires' => $auth['expires_in'],
					'tokenCreated' => time(),
				);
				$this->saveModuleConfig($config);
				$this->ga->setAccessToken($auth['access_token']);
			}			
		}
		
		//Set some default query params
		$defaults = array(
			'start-date' => $this->startDate,
			'end-date' => $this->endDate,
		);
		$this->ga->setDefaultQueryParams($defaults);
		
	}
		
	
	/**
	 * Config Options for this Module
	 * 
	 * @access public
	 * @static
	 * @param array $data
	 * @return InputfieldWrapper
	 */
	static public function getModuleConfigInputfields(array $data) {
		
		$data = array_merge(self::$defaults, $data);
		$modules = wire('modules');
		$input = wire('input');
		$config = wire('config');
		$fields = new InputfieldWrapper();
		
		//Guess redirect URI
		if (empty($data['redirectUri'])) {
			$redirectUri  = $config->https ? 'https://' : 'http://';
			$redirectUri .= $config->httpHost . $config->urls->admin . self::PAGE_NAME . '/';
			$data['redirectUri'] = $redirectUri;
		} 
				
		//Form submitted?
		if (count($input->post)) {
			
			//Clear cache
			$cache = $modules->get('MarkupCache');
			foreach (self::$cacheFiles as $file) $cache->get($file,0);
			
			//Revoke auth?
			if ($input->post->_revokeAuth == 'revoke') {
				$modules->get('ProcessGoogleAnalytics')->ga->auth->revokeAccess($input->post->accessToken);
				$input->post->accountId = '';
				$input->post->accessToken = '';
				$input->post->refreshToken = '';
				$input->post->tokenExpires = '';
				$input->post->tokenCreated = '';
				$fields->message('Removed AccessToken - you will need to authenticate again');
			}
			
		}
		
		//AccessToken	
		$field = $modules->get("InputfieldHidden");
		$field->attr('name+id', 'accessToken');
		$field->attr('value', $data['accessToken']);
		$fields->append($field);	

		//RefreshToken		
		$field = $modules->get("InputfieldHidden");
		$field->attr('name+id', 'refreshToken');
		$field->attr('value', $data['refreshToken']);
		$fields->append($field);	

		//TokenExpires		
		$field = $modules->get("InputfieldHidden");
		$field->attr('name+id', 'tokenExpires');
		$field->attr('value', $data['tokenExpires']);
		$fields->append($field);	

		//TokenCreated		
		$field = $modules->get("InputfieldHidden");
		$field->attr('name+id', 'tokenCreated');
		$field->attr('value', $data['tokenCreated']);
		$fields->append($field);	
				
		//Client ID
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'clientId');
		$field->attr('value', $data['clientId']);
		$field->label = "Client ID";
		$field->description = 'Enter the Client ID from the Google APIs console';
		$fields->append($field);
		
		//Client secret Key
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'clientSecret');
		$field->attr('value', $data['clientSecret']);
		$field->label = "Client Secret";
		$field->description = 'Enter the Client Secret from the Google APIs console';
		$fields->append($field);
		
		//Ga Account ID - only display when Account was chosen with dropdown before
		$field = ($data['accountId']) ? $modules->get("InputfieldText") : $modules->get("InputfieldHidden");
		$field->attr('name+id', 'accountId');
		$field->attr('value', $data['accountId']);
		$field->label = "Google Analytics Account Id";
		$field->description = "Delete this Id and you can choose another Analytics Account (Domain) from the Dropdown again.";
		$fields->append($field);			
				
		$field = $modules->get('InputfieldSelect');
		$field->attr('name+id', 'dateRange');
		$field->attr('value', $data['dateRange']);
		$field->label = "Default date range";
		$field->description = "Select the default date range to display the statistics from";
		$field->addOptions(self::$dates);
		$fields->append($field);
		
		//Compare some results to previous dateRange?
		$field = $modules->get('InputfieldCheckbox');
		$field->attr('name', 'compareToPrevious');
		$checked = $data['compareToPrevious'] ? 'checked' : '';
		$field->attr('value', 1);
		$field->attr('checked', $checked);
		$field->label = "Compare number of visits / pageviews to previous date range?";
		$field->description = "If checked, the module will compute and show the difference (+/-) of some data compared to the previous dateRange.";
		$fields->append($field);		
		
		//Max Results
		$field = $modules->get("InputfieldInteger");
		$field->attr('name+id', 'maxResults');
		$field->attr('value', $data['maxResults']);
		$field->label = "Max number of results returned by the queries";
		$fields->append($field);

		//Cache Time for Results
		$field = $modules->get("InputfieldInteger");
		$field->attr('name+id', 'cacheTime');
		$field->attr('value', $data['cacheTime']);
		$field->label = "Cache Time (seconds)";
		$field->description = "How long do you want to cache the results? Default: 3 hours";
		$fields->append($field);

		//Chart Color
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'chartColor');
		$field->attr('value', $data['chartColor']);
		$field->label = "Chart Color";
		$field->description = "Hex Code used by jqplot to render the chart lines";
		$fields->append($field);

		//Date Format for date range in the header
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'dateFormat');
		$field->attr('value', $data['dateFormat']);
		$field->label = "Date Format Header";
		$field->description = "String used by php's strftime function to format From - To date in the Header";
		$fields->append($field);

		//Date Format for Datetime Inputfields
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'dateFormatInput');
		$field->attr('value', $data['dateFormatInput']);
		$field->label = "Date Format Inputfields";
		$field->description = "String used by php's date function to set the format of the InputfieldDatetime fields in the Options section";
		$fields->append($field);

		//Revoke authentication
		$name = "_revokeAuth"; // prefix with '_' tells ProcessModule not to save it in module's config data
		$field = $modules->get('InputfieldCheckbox');
		$field->attr('name', $name);
		$field->attr('value', 'revoke');
		$field->attr('checked', '');
		$field->label = "Revoke Authentication?";
		$field->description = "Check to revoke Oauth Authentication with Google";
		$fields->append($field);

		return $fields;
	}
}
